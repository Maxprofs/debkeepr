% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-exchange.R
\name{deb_invert_rate}
\alias{deb_invert_rate}
\title{Calculate the inverse of an exchange rate}
\usage{
deb_invert_rate(exchange_rate, output = c("shillings", "pence", "pounds"),
  bases = c(20, 12))
}
\arguments{
\item{exchange_rate}{Numeric vector of length 3 or list of numeric vectors
of length 3 representing the exchange rate to be inverted. The first
position of the vector represents the pounds value or l. The second
position represents the shillings value or s. And the third position
represents the pence value or d. The values do not need to be normalized.}

\item{output}{Choice of either \code{"shillings"}, \code{"pence"}, or \code{"pounds"} for
the format in which the exchange rate will be returned.  \code{"shillings"},
the default, returns the exchange rate in terms of shillings and pence.
\code{"pence"} returns the exchange rate in terms of pence. \code{"pounds"} returns
the exchange rate in terms of pounds, shillings, and pence.}

\item{bases}{Numeric vector of length 2 used to specify the bases for
the s or solidus and d or denarius values in \code{lsd} vectors. Default is
\code{c(20, 12)}, which conforms to the most widely used system of 1 libra =
20 solidi and 1 solidus = 12 denarii. This argument makes it possible to
use alternative bases for the solidus and denarius values that were also
in use.}
}
\value{
Returns either a named numeric vector of length 3 or a list of
named numeric vectors representing the values of pounds, shillings,
and pence. The format of the returned value is determined by the \code{output}
argument, either pounds, shillings, and pence; shillings and pence; or
just pence.
}
\description{
Given an exchange rate between two currencies, calculate the inverse rate,
or the rate in the opposite direction.
}
\examples{
# Find the inverse exchange rate of 33s. 4d.
# Flemish pounds per pound sterling
deb_invert_rate(exchange_rate = c(0, 33, 4))

# Inverse of an exchange rate of Â£2 13s. 4d. in pence
deb_invert_rate(exchange_rate = c(2, 13, 4),
                output = "pence")

}
