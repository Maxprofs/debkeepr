% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-normalize.R
\name{deb_normalize}
\alias{deb_normalize}
\title{Normalize pounds, shillings, and pence}
\usage{
deb_normalize(lsd, bases = c(20, 12), round = 5)
}
\arguments{
\item{lsd}{Numeric vector of length 3 or list of numeric vectors of length
3. The first position of the vector represents the pounds value or l. The
second position represents the shillings value or s. And the third
position represents the pence value or d.}

\item{bases}{Numeric vector of length 2 used to specify the bases for
the shillings or s and pence or d units in \code{lsd}. Default is \code{c(20, 12)},
which conforms to the most widely used system of 1 pound = 20 shillings
and 1 shilling = 12 pence. This argument makes it possible to use
alternate bases for the shillings (s) and pence (d) units.}

\item{round}{Round pence to specified number of decimal places.
Default is 5. Set to 0 to return pence as whole numbers.}
}
\value{
Returns either a named numeric vector of length 3 or a list of named
numeric vectors representing the normalized values of pounds, shillings,
and pence. If the input lsd value is negative, the l, s, and d values will
all be negative.
}
\description{
Normalize pounds, shillings, and pence to standard unit bases.
}
\details{
\code{deb_normalize()} uses the nomenclature of
\href{https://en.wikipedia.org/wiki/Â£sd}{l, s, and d} to represent pounds,
shillings, and pence units. The abbreviations derive from the Latin terms
\href{https://en.wikipedia.org/wiki/French_livre}{libra},
\href{https://en.wikipedia.org/wiki/Solidus_(coin)}{solidus}, and
\href{https://en.wikipedia.org/wiki/Denarius}{denarius}. In the 8th century a
solidus came to represent 12 denarii, and 240 denarii were made from one
libra or pound of silver. The custom of counting coins in dozens (solidi)
and scores of dozens (librae) spread throughout the Carolingian Empire and
became engrained in much of Europe. However,
\href{https://en.wikipedia.org/wiki/Non-decimal_currency}{other bases} for the
solidus and denarius units were also in use. The \code{bases} argument makes
it possible to specify alternate bases for the solidus and denarius units.
}
\examples{
# Use to normalize the values of pounds, shillings, and pence
deb_normalize(lsd = c(5, 55, 22))

# Normalize values with alternative bases for solidus and denarius units
# For instance, the Dutch system of guilders, stuivers, and penningen
deb_normalize(lsd = c(5, 55, 22), bases = c(20, 16))

# It is possible to perform arithmetic within the function
deb_normalize(lsd = c(5 + 6, 20 + 18, 8 + 11))

# deb_normalize can deal with negative values
deb_normalize(lsd = c(-5, -25, -22))

# Or a mixture of positive and negative values
# if that occurs for some reason
deb_normalize(lsd = c(5, -25, 22))

# Can also properly normalize decimalized pounds and shillings
deb_normalize(lsd = c(8.7, 33.65, 15))

# Round argument can be used to round pence unit to
# specific decimal place and properly normalize value
# Compare with default of round = 5 to round = 0
deb_normalize(lsd = c(5.7, 44.742, 15), round = 5)
deb_normalize(lsd = c(5.7, 44.742, 15), round = 0)

# To normalize multiple lsd values use a list of lsd vectors
lsd_list <- list(c(4, 34, 89), c(-9, -75, -19), c(15.85, 36.15, 56))
deb_normalize(lsd = lsd_list)

# It is possible to do arithmetic within the lsd argument
# if inputs are all vectors.
deb_normalize(lsd = c(56, 8, 5) + c(19, 5, 7))
deb_normalize(lsd = c(56, 8, 5) - c(19, 5, 7))
deb_normalize(lsd = c(56, 8, 5) * 3)
deb_normalize(lsd = c(56, 8, 5) / 3)

# This will not work if one of the objects is a list
# Use arithmetic functions for this
\dontrun{
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) + list(c(19, 5, 7), c(6, 3, 2)))
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) - c(19, 5, 7))
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) * 3)
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) / 3)
}

}
