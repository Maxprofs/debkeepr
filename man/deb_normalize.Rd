% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-normalize.R
\name{deb_normalize}
\alias{deb_normalize}
\title{Normalize pounds, shillings, and pence}
\usage{
deb_normalize(lsd, bases = c(20, 12), round = 5)
}
\arguments{
\item{lsd}{An lsd value. An object of class lsd or an object that can be
coerced to class lsd: a numeric vector of length 3 or a list of such
vectors.}

\item{bases}{Numeric vector of length 2 used to specify the bases for the
shillings or s and pence or d units. Default is \code{c(20, 12)}, which
conforms to the most widely used system of 1 pound = 20 shillings and
1 shilling = 12 pence. If \code{lsd} is of class lsd, the bases attribute will
be used in the place of this argument.}

\item{round}{Round pence unit to specified number of decimal places.
Default is 5. Set to 0 to return pence as whole number.}
}
\value{
Returns an object of class lsd with a bases attribute.
}
\description{
Normalize pounds, shillings, and pence to standard unit bases.
}
\details{
\code{deb_normalize()} uses the nomenclature of
\href{https://en.wikipedia.org/wiki/Â£sd}{l, s, and d} to represent pounds,
shillings, and pence units. The abbreviations derive from the Latin terms
\href{https://en.wikipedia.org/wiki/French_livre}{libra},
\href{https://en.wikipedia.org/wiki/Solidus_(coin)}{solidus}, and
\href{https://en.wikipedia.org/wiki/Denarius}{denarius}. In the 8th century a
solidus came to represent 12 denarii coins, and 240 denarii were made from
one libra or pound of silver. The custom of counting coins in dozens
(solidi) and scores of dozens (librae) spread throughout the Carolingian
Empire and became engrained in much of Europe. However,
\href{https://en.wikipedia.org/wiki/Non-decimal_currency}{other bases} for the
solidus and denarius units were also in use. The \code{bases} attribute makes
it possible to specify alternative bases for the solidus and denarius units.
}
\examples{
# Use to normalize the values of pounds, shillings, and pence
deb_normalize(lsd = c(5, 55, 42))

# Normalize values with alternative bases for solidus and denarius units
# For instance, the Dutch system of guilders, stuivers, and penningen
deb_normalize(lsd = c(5, 55, 42), bases = c(20, 16))

# Normalizing an object of class lsd will use the bases attribute
lsd <- deb_as_lsd(lsd = c(5, 55, 42), bases = c(20, 16))
deb_normalize(lsd = lsd)

# Normalize multiple values with a list of numeric vectors
lsd_list <- list(c(4, 34, 89), c(-9, -75, -19), c(15.85, 36.15, 56))
deb_normalize(lsd = lsd_list)

# Or an lsd object with alternative bases
lsd_list2 <- deb_as_lsd(lsd = lsd_list, bases = c(20, 16))
deb_normalize(lsd = lsd_list2)

# It is possible to perform arithmetic within the function
deb_normalize(lsd = c(5 + 6, 20 + 18, 8 + 11))

# deb_normalize can deal with negative values
deb_normalize(lsd = c(-5, -25, -22))

# Or a mixture of positive and negative values
# if that occurs for some reason
deb_normalize(lsd = c(5, -25, 22))

# Can also properly normalize decimalized pounds and shillings
deb_normalize(lsd = c(8.7, 33.65, 15))

# Round argument can be used to round pence unit to
# specific decimal place and properly normalize value
# Compare with default of round = 5 to round = 0
deb_normalize(lsd = c(5.7, 44.742, 15), round = 5)
deb_normalize(lsd = c(5.7, 44.742, 15), round = 0)

# It is possible to do arithmetic within the lsd argument
# if inputs are all vectors.
deb_normalize(lsd = c(56, 8, 5) + c(19, 5, 7))
deb_normalize(lsd = c(56, 8, 5) - c(19, 5, 7))
deb_normalize(lsd = c(56, 8, 5) * 3)
deb_normalize(lsd = c(56, 8, 5) / 3)

# This will not work if one of the objects is a list
# Use arithmetic functions for this
\dontrun{
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) + list(c(19, 5, 7), c(6, 3, 2)))
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) - c(19, 5, 7))
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) * 3)
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) / 3)
}

}
