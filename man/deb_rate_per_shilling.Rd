% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-exchange.R
\name{deb_rate_per_shilling}
\alias{deb_rate_per_shilling}
\title{Exchange rate per shillings}
\usage{
deb_rate_per_shilling(lsd1, lsd2, lsd_bases = c(20, 12))
}
\arguments{
\item{lsd1, lsd2}{Numeric vectors of length 3 or lists of numeric vectors of
length 3. The first position of the vectors represents the pounds value or
l. The second position represents the shillings value or s. And the third
position represents the pence value or d. \code{lsd2} is the value (or values)
that is reduced to £1 and against which \code{lsd1} is compared. Thus, \code{lsd2}
= £1 and \code{lsd1} = the returned value.}

\item{lsd_bases}{Numeric vector of length 2 used to specify the bases for
the s or solidus and d or denarius values in \code{lsd} vectors. Default is
\code{c(20, 12)}, which conforms to the most widely used system of 1 libra =
20 solidi and 1 solidus = 12 denarii. This argument makes it possible to
use alternative bases for the solidus and denarius values that were also
in use.}
}
\value{
Returns either a named numeric vector of length 3 or a list of
named numeric vectors representing the values of pounds, shillings,
and pence. The rate is returned in the form of shillings and pence, which
follows the contemporary practice and the form used in the
\code{rate_per_shillings} argument in \code{\link[=deb_exchange]{deb_exchange()}} and
\code{\link[=deb_exchange_mutate]{deb_exchange_mutate()}}. If \code{lsd1} > \code{lsd2} the returned vector will have
a shillings value greater than the base for shillings.
}
\description{
Calculate the exchange rate between two sets of values in the form of
pounds, shillings, and pence. The rate is returned in the form of shillings
and pence, which follows the contemporary practice and the form used in the
\code{rate_per_shillings} argument in \code{\link[=deb_exchange]{deb_exchange()}} and \code{\link[=deb_exchange_mutate]{deb_exchange_mutate()}}.
}
\details{
If \code{lsd1} and \code{lsd2} are lists of different lengths or one is a vector,
the shorter list will be recycled.
}
\examples{
# Find the exchange rate if £166 13s 4d in one currency is
# equivalent to £100 0s 0d in another currency
deb_rate_per_shilling(lsd1 = c(166, 13, 4), lsd2 = c(100, 0, 0))

# The rate returned is in the non-normalized form of shillings and pence
# Can normalize the returned value by piping to `deb_normalize()`.
deb_rate_per_shilling(lsd1 = c(166, 13, 4), lsd2 = c(100, 0, 0)) \%>\%
  deb_normalize()

# To find the exchange rate for multiple currencies
# use a list of lsd vectors for `lsd1` or `lsd2`
list_a <- list(c(150, 0, 0), c(125, 0, 0), c(175, 13, 4))
list_b <- list(c(125, 0, 0), c(100, 8, 4), c(100, 0, 0))

deb_rate_per_shilling(lsd1 = list_a, lsd2 = list_b)

# Or find the exchange rate of multiple currencies to a
# single currency by using a vector for `lsd2`

deb_rate_per_shilling(lsd1 = list_a, lsd2 = c(100, 0, 0))

}
