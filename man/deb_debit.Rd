% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-accounts.R
\name{deb_debit}
\alias{deb_debit}
\title{Calculate the total debit of accounts}
\usage{
deb_debit(df, debit = debit, l = l, s = s, d = d, bases = c(20,
  12), round = 5, na.rm = FALSE)
}
\arguments{
\item{df}{A data frame containing transactions between accounts with
variables for the credit and debit accounts and values in the form of
pounds, shillings, and pence variables.}

\item{debit}{Debit column: Unquoted name of the debit variable. This
represents the accounts that receive the transactional values. Default is
debit. The \code{debit} column must be of the same class as the \code{credit}
column.}

\item{l}{Pounds column: Unquoted name of a numeric variable corresponding
to the pounds or librae unit. Default is l.}

\item{s}{Shillings column: Unquoted name of numeric variable corresponding
to the shillings or solidi unit. Default is s.}

\item{d}{Pence column: Unquoted name of numeric variable corresponding to
the pence or denarii unit. Default is d.}

\item{bases}{Numeric vector of length 2 used to specify the bases for
the shillings or s and pence or d units in \code{lsd}. Default is \code{c(20, 12)},
which conforms to the most widely used system of 1 pound = 20 shillings
and 1 shilling = 12 pence. This argument makes it possible to use
alternate bases for the shillings (s) and pence (d) units.}

\item{round}{Round pence to specified number of decimal places. Default
is 5. Rounding of the pence value takes place throughout the function and
is not simply done at the end of the function call. This means that the
credit, debit, and current values will add together correctly. However,
the rounded values may be different than running the function without
rounding and rounding pence values at the end.}

\item{na.rm}{Logical. Passed on to \code{na.rm} argument in \code{\link[=sum]{sum()}}. Whether
missing values (NA) should be removed. Default is \code{FALSE}.}
}
\value{
Returns a tibble with four columns and one row for each account
present in the transactions data frame (\code{df}). The values represent the
total value received by each account from other accounts within \code{df}. The
names for the pounds, shillings, and pence variables correspond to the
input for \code{l}, \code{s}, and \code{d}.
}
\description{
Calculate the total debit of accounts in a transactions data frame.
}
\details{
\code{deb_debit()} is similar to \code{\link[=deb_account_summary]{deb_account_summary()}}, but it only returns
the debit values for the accounts in \code{df}. See \code{\link[=deb_credit]{deb_credit()}} to return
the credit totals for the accounts in \code{df}.

\code{deb_debit()} is part of a family of functions meant to be used on
data frames that contain transactions between accounts in an account
book. The data frame should possess a similar structure to a
\href{https://www.jessesadler.com/post/network-analysis-with-r/#nodes-edges}{directed edge list}.
In this context, credit and debit variables contain the ids of the accounts
and act as the edges of the network. Following the
\href{https://en.wikipedia.org/wiki/Debits_and_credits}{nomenclature of accounting},
the credit variable represents the account that the transactional value is
from, while the debit variable represents the account that receives the
value. Thus, from the credit account to the debit account.
}
\examples{
# Create a transactions data frame
trans <- data.frame(credit = c("a", "b", "b", "a", "c"),
                    debit = c("b", "a", "a", "c", "a"),
                    l = c(10, 6, 4, 7, 9),
                    s = c(15, 3, 11, 11, 2),
                    d = c(6, 11, 7, 8, 11))

# Total debit of accounts present in trans
deb_debit(df = trans, debit = debit,
          l = l, s = s, d = d)

}
\seealso{
Other lsd account functions: \code{\link{deb_account_summary}},
  \code{\link{deb_account}}, \code{\link{deb_balance}},
  \code{\link{deb_credit}}, \code{\link{deb_current}},
  \code{\link{deb_open}}
}
\concept{lsd account functions}
