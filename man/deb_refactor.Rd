% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-refactor.R
\name{deb_refactor}
\alias{deb_refactor}
\title{Refactor pounds, shillings, and pence}
\usage{
deb_refactor(l, s, d, round = 3, vector = FALSE)
}
\arguments{
\item{l}{Pounds: numeric value}

\item{s}{Shillings: numeric value}

\item{d}{Pence: numeric value}

\item{round}{round pence to specified number of decimal places. Default is 3.
Set to 0 if you want pence to always be a whole number.}

\item{vector}{Logical (default FALSE), when FALSE the output will
be a tibble, when TRUE the output will be a numeric vector.}
}
\value{
Returns either a tibble with one row of values and columns for the
pounds, shillings, and pence values labeled as l, s, and d or a named
numeric vector with values for pounds, shillings, and pence. If the amount
is negative, the pounds, shillings, and pence values will all be negative.
}
\description{
Refactor pounds, shillings, and pence to correct values based
on 12 pence in a shilling and 20 shillings in a pound.
}
\details{
This function uses the nomenclature of l, s, and d to refer to pounds,
shillings, and pence. This derives from the Latin terms for librae,
solidi, and denarii. One solidus was equivalent to 12 denarii, and
240 denarii coins were made from on libra of silver. The nomenclature
and values of 12 denarii to 1 solidus and 20 solidi to 1 libra was
adopted by Charlemagne and spread throughout Europe under different names.
For more information on the lsd noemclature see
\url{https://en.wikipedia.org/wiki/Â£sd}
}
\examples{
# Use to calculate the correct number of pounds, shillings, and pence
deb_refactor(l = 5, s = 25, d = 22)
deb_refactor(5, 25, 22, vector = TRUE)

# It is possible to add within the function
deb_refactor(5 + 6, 20 + 18, 8 + 11)
# Or even
deb_refactor(sum(4, 9, 0), sum(12, 16, 5), sum(11, 0, 6))

# deb_refactor can deal with negative values
deb_refactor(-5, -25, -22)
# Or even a mixture of positive and negative if that occurs for some reason
deb_refactor(5, -25, 22)

# deb_refactor can also properly refactor decimalized pounds and shillings
deb_refactor(8.7, 33.65, 15)

}
