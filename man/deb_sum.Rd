% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-sum.R
\name{deb_sum}
\alias{deb_sum}
\title{Sum of pounds, shillings, and pence columns in a data frame}
\usage{
deb_sum(df, l = l, s = s, d = d, round = 3)
}
\arguments{
\item{df}{A data frame that contains columns with pounds, shillings,
and pence variables.}

\item{l}{Pounds column: Unquoted name of a numeric variable corresponding
to pounds. Default is l.}

\item{s}{Shillings column: Unquoted name of numeric variable corresponding
to shillings. Default is s.}

\item{d}{Pence column: Unquoted name of numeric variable corresponding to
pence. Default is d.}

\item{round}{round pence to specified number of decimal places.
Default is 3. Set to 0 if you want pence to always be a whole number.}
}
\value{
Returns a data frame with one level of grouping dropped. Any
variables other than \code{l}, \code{s}, \code{d} that are not grouped
will be dropped. If the sum of any group is a negative value, the
\code{l}, \code{s}, \code{d} values for that group will all be returned
as negative.
}
\description{
Uses \code{\link[dplyr]{summarise()}} to add pounds, shillings, and pence
columns in a data frame and refactor the values so that the result has
properly formatted values.
}
\details{
When used on a data frame without any grouping, the result will be a data
frame with a single row consisting of columns for pounds, shillings, and
pence. When used in conjunction with \code{\link[dplyr]{group_by()}},
\code{deb_sum()} will summarize the pounds, shillings, and pence columns
for each group.
}
\examples{
# Use on an ungrouped data frame adds all values of pounds, shillings,
# and pence, resulting in a data frame with one row.
example1 <- tibble::tibble(group = c(1, 2, 1, 2),
                           l = c(3, 5, 6, 2),
                           s = c(10, 18, 11, 16),
                           d = c(9, 11, 10, 5))
deb_sum(example1, l, s, d)

# Use with group_by() summarizes the values of pounds, shillings,
# and pence for each group.
example1 \%>\%
  dplyr::group_by(group) \%>\%
  deb_sum(l, s, d)

# The default for the function is to have pounds, shillings, and pence
# columns labeled as l, s, d. If this is true, you do not need to
# include these arguments.
example1 \%>\%
  dplyr::group_by(group) \%>\%
  deb_sum()

# The function can take into account negative values
example2 <- tibble::tibble(group = c(1, 2, 1, 2),
                           l = c(-3, 5, -6, 2),
                           s = c(-10, 18, -11, 16),
                           d = c(-9, 11, -10, 5))
example2 \%>\%
  dplyr::group_by(group) \%>\%
  deb_sum(l, s, d)

}
