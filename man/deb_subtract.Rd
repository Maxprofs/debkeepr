% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-arithmetic.R
\name{deb_subtract}
\alias{deb_subtract}
\title{Subtract two values of pounds, shillings, and pence}
\usage{
deb_subtract(lsd1, lsd2, round = 3, vector = FALSE)
}
\arguments{
\item{lsd1, lsd2}{Either numeric vectors of length 3 representing the pounds,
shillings, and pence of the two values or lists of numeric vectors
of length 3. lsd2 is the value or values to be stubtracted from lsd1:
\code{lsd1 - lsd2}.}

\item{round}{Round pence to specified number of decimal places.
Default is 3. Set to 0 to return pence as whole numbers.}
}
\value{
Returns either a tibble with columns for the pounds, shillings, and
pence values labeled as l, s, and d or a named numeric vector with values
for pounds, shillings, and pence. If \code{lsd1} and \code{lsd2} are lists, the
number of rows in the resulting tibble will be the length of the longest
list. If \code{lsd1} and \code{lsd2} are lists and \code{vector = TRUE}, the result will
be a list of named vectors the length of the longest list.
}
\description{
Subtract and normalize two values of pounds, shillings, and pence
that are given in the form of either two numeric vectors or two lists
of numeric vectors (\code{lsd1} and \code{lsd2}). This is a wrapper around
\code{\link[=deb_normalize]{deb_normalize()}}.
}
\details{
If \code{lsd1} and \code{lsd2} are lists of different lengths, the shorter list
will be recycled.

\code{deb_subtract()} uses the nomenclature of
\href{https://en.wikipedia.org/wiki/Â£sd}{l, s, and d} to refer to pounds,
shillings, and pence. This derives from the Latin terms for librae,
solidi, and denarii. One solidus was equivalent to 12 denarii, and
240 denarii coins were made from on libra of silver. The nomenclature
and values of 12 denarii to 1 solidus and 20 solidi to 1 libra was
adopted by Charlemagne and spread throughout Europe under different names.
}
\examples{
# Subtract pounds, shillings, and pence
deb_subtract(lsd1 = c(56, 8, 5), lsd2 = c(19, 5, 7))
deb_subtract(lsd1 = c(56, 8, 5), lsd2 = c(19, 5, 7), vector = TRUE)

# The l, s, and d values do not have to be normalized
deb_subtract(lsd1 = c(76, 65, 35), lsd2 = c(9, 54, 17))

# A warning is given if any values in lsd1 or lsd2 are negative
# to ensure that this is what the user wants.
deb_subtract(lsd1 = c(56, 8, 5), lsd2 = c(-19, -5, -7))

# Like deb_normalize(), deb_subtract can handle decimals
deb_subtract(lsd1 = c(56.85, 8.4, 5), lsd2 = c(19.25, 5, 7))

# lsd1 and lsd2 can be lists of numerical vectors
# Each vector is lsd1 will be subtracted from the
# corresponding vector in lsd2.
# Returns tibble with 2 rows
deb_subtract(lsd1 = list(c(56, 8, 5), c(27, 12, 4)),
             lsd2 = list(c(19, 5, 7), c(6, 3, 2)))

# Or a list with two numeric vectors
deb_subtract(lsd1 = list(c(56, 8, 5), c(27, 12, 4)),
             lsd2 = list(c(19, 5, 7), c(6, 3, 2)),
             vector = TRUE)

}
\seealso{
Other lsd arithmetic functions: \code{\link{deb_divide_mutate}},
  \code{\link{deb_divide}},
  \code{\link{deb_multiply_mutate}},
  \code{\link{deb_multiply}}
}
