% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsd-arithmetic.R
\name{deb_subtract}
\alias{deb_subtract}
\title{Subtraction of two values of pounds, shillings, and pence}
\usage{
deb_subtract(lsd1, lsd2, bases = c(20, 12), round = 5)
}
\arguments{
\item{lsd1, lsd2}{lsd values. Objects of class lsd or objects that can be
coerced to class lsd: numeric vectors of length 3 or lists of such
vectors. If \code{lsd1} and \code{lsd2} are both lists, they must be the same
length, or one must be of length 1. \code{lsd2} is the value or values to be
subtracted from \code{lsd1}: \code{lsd1 - lsd2}.}

\item{bases}{Numeric vector of length 2 used to specify the bases for the
shillings or s and pence or d units. Default is \code{c(20, 12)}, which
conforms to the most widely used system of 1 pound = 20 shillings and
1 shilling = 12 pence. If \code{lsd1} and/or \code{lsd2} is of class lsd, the bases
attribute will be used in the place of this argument. If the bases
attributes of \code{lsd1} and \code{lsd2} are different, an error will be thrown.}

\item{round}{Round pence unit to specified number of decimal places.
Default is 5. Set to 0 to return pence as whole number.}
}
\value{
Returns an object of class lsd with a bases attribute.
}
\description{
Subtract two pounds, shillings, and pence values that are in the form of lsd
objects, numeric vectors, or lists of numeric vectors. If one of \code{lsd1}
and \code{lsd2} is a list and the other is a vector, the vector will be recycled.
}
\examples{
# Subtract pounds, shillings, and pence
deb_subtract(lsd1 = c(56, 8, 5), lsd2 = c(19, 5, 7))

# Subtract lsd values that have alternative bases
deb_subtract(lsd1 = c(56, 8, 5), lsd2 = c(19, 5, 7), bases = c(20, 16))

# If one of the values is of class lsd the bases attribute will be used
lsd1 <- deb_as_lsd(lsd = c(56, 8, 5), bases = c(20, 16))
deb_subtract(lsd1 = lsd1, lsd2 = c(19, 5, 7))

# If lsd1 and lsd2 have different bases, the function will throw an error
lsd2 <- deb_as_lsd(lsd = c(19, 5, 7), bases = c(20, 12))
\dontrun{
deb_subtract(lsd1 = lsd1, lsd2 = lsd2)
}

# Subtracting two vectors is equivalent to using deb_normalize
deb_normalize(lsd = c(56, 8, 5) - c(19, 5, 7))

# deb_subtract is useful when one or both of lsd1 and lsd2
# are lists of numerical vectors

# With two lists of the same length each vector in lsd1
# will be subtracted from the corresponding vector in lsd2.
deb_subtract(lsd1 = list(c(56, 8, 5), c(27, 12, 4)),
             lsd2 = list(c(19, 5, 7), c(6, 3, 2)))

# As opposed to using deb_normalize, which will not work
\dontrun{
deb_normalize(list(c(56, 8, 5), c(27, 12, 4)) - list(c(19, 5, 7), c(6, 3, 2)))
}

# If lsd1 and lsd2 are lists of different lengths
# or one is a vector, the shorter argument is recycled.
deb_subtract(lsd1 = list(c(56, 8, 5),
                         c(27, 12, 4),
                         c(78, 14, 11)),
             lsd2 = c(6, 18, 10))

}
\seealso{
Other lsd arithmetic functions: \code{\link{deb_add_mutate}},
  \code{\link{deb_add}}, \code{\link{deb_divide_mutate}},
  \code{\link{deb_divide}},
  \code{\link{deb_multiply_mutate}},
  \code{\link{deb_multiply}},
  \code{\link{deb_subtract_mutate}},
  \code{\link{deb_sum_df}}, \code{\link{deb_sum}}
}
\concept{lsd arithmetic functions}
